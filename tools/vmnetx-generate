#!/usr/bin/env python
#
# vmnetx - Virtual machine network execution
#
# Copyright (C) 2012-2013 Carnegie Mellon University
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of version 2 of the GNU General Public License as published
# by the Free Software Foundation.  A copy of the GNU General Public License
# should have been distributed along with this program in the file
# COPYING.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
#

from optparse import OptionParser
import sys

import vmnetx
from vmnetx.define import define_machine
from vmnetx.domain import DomainXML
from vmnetx.generate import generate_machine
from vmnetx.reference import PackageReference
from vmnetx.util import setup_libvirt

USAGE = 'Usage: %prog [-nu] domain-xml out-file\n' + \
        '       %prog -r package-url out-file\n' + \
        '       %prog -a short-name memory-MB disk-GB\n' + \
        '       %prog -c domain-xml'
VERSION = '%prog ' + vmnetx.__version__
DESCRIPTION = 'Construct a VMNetX virtual machine image.'

parser = OptionParser(usage=USAGE, version=VERSION, description=DESCRIPTION)
parser.add_option('-a', '--add', dest='add',
        help='Create a blank VM and add it to virt-manager', metavar='NAME')
parser.add_option('-c', '--check-xml', dest='check_xml',
        help='Validate domain XML', metavar='PATH')
parser.add_option('-n', '--name', dest='name', default='Virtual Machine',
        help='Name of virtual machine', metavar='NAME')
parser.add_option('-r', '--reference', dest='reference',
        help='Create reference to remote VM image', metavar='URL')
parser.add_option('-u', '--uncompressed', dest='compress',
        action='store_false', default=True,
        help='Skip compression of disk/memory images')

opts, args = parser.parse_args()
try:
    setup_libvirt()
    if opts.check_xml:
        if len(args) != 0:
            parser.error('Incorrect mandatory arguments')
        with open(opts.check_xml) as fh:
            DomainXML(fh.read(), validate=DomainXML.VALIDATE_STRICT)
    elif opts.add:
        if len(args) != 2:
            parser.error('Incorrect mandatory arguments')
        memory_mb, disk_gb = args
        define_machine(opts.add, int(memory_mb), int(disk_gb))
    elif opts.reference:
        if len(args) != 1:
            parser.error('Incorrect mandatory arguments')
        out_file = args[0]
        ref = PackageReference(opts.reference)
        with open(out_file, 'w') as fh:
            fh.write(ref.xml)
    else:
        if len(args) != 2:
            parser.error('Incorrect mandatory arguments')
        domain_xml, out_file = args
        generate_machine(opts.name, domain_xml, out_file,
                compress=opts.compress)
except KeyboardInterrupt:
    sys.exit(1)
except Exception, e:
    print str(e)
    detail = getattr(e, 'detail', None)
    if detail:
        print detail
    sys.exit(1)
