#!/usr/bin/env python
#
# vmnetx-server - Export VMNetX VMs via remote network protocol
#
# Copyright (C) 2012-2013 Carnegie Mellon University
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of version 2 of the GNU General Public License as published
# by the Free Software Foundation.  A copy of the GNU General Public License
# should have been distributed along with this program in the file
# COPYING.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
#

import fcntl
from getpass import getpass
import glib
import logging
from optparse import OptionParser
import os
import signal
import socket
import sys
import yaml

import vmnetx
from vmnetx.server import VMNetXServer

USAGE = 'Usage: %prog [options] config-file'
VERSION = '%prog ' + vmnetx.__version__
DESCRIPTION = 'Export VMNetX VMs via remote network protocol.'

DEFAULT_PORT = 18923
DEFAULT_GC_INTERVAL = 1000 * 5  # milliseconds
DEFAULT_TOKEN_TIMEOUT = 60 * 5  # seconds
DEFAULT_HTTP_HOST = '127.0.0.1'
DEFAULT_HTTP_PORT = 18924


def parse_config(path):
    with open(path, 'r') as stream:
        config = yaml.load(stream)
    options = {}

    options['secret_key'] = config.get('secret_key')
    if options['secret_key'] is None:
        raise ValueError("Missing secret key")

    options['username'] = config.get('username')
    options['password'] = config.get('password')

    options['host'] = config.get('host')
    if options['host'] is None:
        options['host'] = socket.gethostbyname(socket.gethostname())

    options['port'] = config.get('port', DEFAULT_PORT)
    if not isinstance(options['port'], int):
        raise ValueError("Invalid port setting")

    options['http_host'] = config.get('http_host', DEFAULT_HTTP_HOST)
    if not isinstance(options['http_host'], str):
        raise ValueError("Invalid http host")

    options['http_port'] = config.get('http_port', DEFAULT_HTTP_PORT)
    if not isinstance(options['http_port'], int):
        raise ValueError("Invalid http port")

    options['gc_interval'] = config.get('gc_interval', DEFAULT_GC_INTERVAL)
    if not isinstance(options['gc_interval'], int):
        raise ValueError("Invalid GC timeout")

    options['token_timeout'] = config.get('token_timeout',
            DEFAULT_TOKEN_TIMEOUT)
    if not isinstance(options['token_timeout'], int):
        raise ValueError("Invalid token timeout")

    return options


# self-pipe trick for shutting down correctly from signals
def shutdown(source, _cond):
    try:
        source.read(1)
    except IOError, e:
        if e.errno == errno.EAGAIN:
            return True
        _log.exception("Received unexpected error: shutting down")
    loop.quit()
    return False


def setup_signals():
    fd_rd, fd_wr = os.pipe()
    fcntl.fcntl(fd_rd, fcntl.F_SETFL,
            fcntl.fcntl(fd_rd, fcntl.F_GETFL) | os.O_NONBLOCK)
    fcntl.fcntl(fd_wr, fcntl.F_SETFL,
            fcntl.fcntl(fd_wr, fcntl.F_GETFL) | os.O_NONBLOCK)

    rd = os.fdopen(fd_rd, 'r')
    wr = os.fdopen(fd_wr, 'w', 0)

    glib.io_add_watch(rd, glib.IO_IN, shutdown)

    def sig_handler(sig, _frame):
        wr.write('x')
    signal.signal(signal.SIGTERM, sig_handler)
    signal.signal(signal.SIGINT, sig_handler)


parser = OptionParser(usage=USAGE, version=VERSION, description=DESCRIPTION)
parser.add_option('-d', '--debug', dest='debug', action='store_true',
        help='Enable debug messages')

opts, args = parser.parse_args()
if len(args) != 1:
    parser.error('Incorrect mandatory argument')
config_path = args[0]

setup_signals()

if opts.debug:
    loglevel = logging.DEBUG
else:
    loglevel = logging.INFO
logging.basicConfig(level=loglevel)

options = parse_config(config_path)

server = VMNetXServer(options)
server.initialize()
loop = glib.MainLoop()
try:
    loop.run()
finally:
    server.shutdown()
